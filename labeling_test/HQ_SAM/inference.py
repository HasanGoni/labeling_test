"""Inference with high quality SAM"""

# AUTOGENERATED! DO NOT EDIT! File to edit: ../../nbs/09_HQ_SAM.inference.ipynb.

# %% auto 0
__all__ = ['CV_TOOLS', 'custom_lib_path', 'CURRETNT_NB', 'show_points', 'show_points_on_image', 'show_mask',
           'show_masks_on_image']

# %% ../../nbs/09_HQ_SAM.inference.ipynb 3
import sys
from pathlib import Path
from PIL import Image
from typing import List


# %% ../../nbs/09_HQ_SAM.inference.ipynb 4
CV_TOOLS = Path(r'/home/ai_sintercra/homes/hasan/projects/git_data/cv_tools')
sys.path.append(str(CV_TOOLS))


# %% ../../nbs/09_HQ_SAM.inference.ipynb 5
custom_lib_path = Path(r'/home/ai_warstein/homes/goni/custom_libs')
sys.path.append(str(custom_lib_path))


# %% ../../nbs/09_HQ_SAM.inference.ipynb 6
from cv_tools.imports import *
from cv_tools.core import *
from cv_tools.dataset_check import *
from dotenv import load_dotenv
import matplotlib.pyplot as plt


# %% ../../nbs/09_HQ_SAM.inference.ipynb 7
#load_dotenv(dotenv_path=f'/home/ai_sintercra/homes/hasan/projects/git_data/labeling_test/labeling_test/.env')

# %% ../../nbs/09_HQ_SAM.inference.ipynb 17
def show_points(
    coords, 
    labels, 
    ax, 
    marker_size=375):
    'Show points on a image'
    pos_points = coords[labels==1]
    neg_points = coords[labels==0]
    ax.scatter(pos_points[:, 0], pos_points[:, 1], color='green', marker='*', s=marker_size, edgecolor='white', linewidth=1.25)
    ax.scatter(neg_points[:, 0], neg_points[:, 1], color='red', marker='*', s=marker_size, edgecolor='white', linewidth=1.25)

# %% ../../nbs/09_HQ_SAM.inference.ipynb 18
def show_points_on_image(raw_image, input_points, input_labels=None):
    plt.figure(figsize=(10,10))
    plt.imshow(raw_image)
    input_points = np.array(input_points)
    if input_labels is None:
      labels = np.ones_like(input_points[:, 0])
    else:
      labels = np.array(input_labels)
    show_points(input_points, labels, plt.gca())
    plt.axis('on')
    plt.show()

# %% ../../nbs/09_HQ_SAM.inference.ipynb 21
def show_mask(mask, ax, random_color=False):
    if random_color:
        color = np.concatenate([np.random.random(3), np.array([0.6])], axis=0)
    else:
        color = np.array([30/255, 144/255, 255/255, 0.6])
    h, w = mask.shape[-2:]
    mask_image = mask.reshape(h, w, 1) * color.reshape(1, 1, -1)
    ax.imshow(mask_image)

# %% ../../nbs/09_HQ_SAM.inference.ipynb 22
def show_masks_on_image(raw_image, masks, scores):
    if len(masks.shape) == 4:
      masks = masks.squeeze()
    if scores.shape[0] == 1:
      scores = scores.squeeze()

    nb_predictions = scores.shape[-1]
    fig, axes = plt.subplots(1, nb_predictions, figsize=(15, 15))

    for i, (mask, score) in enumerate(zip(masks, scores)):
      mask = mask.cpu().detach()
      axes[i].imshow(np.array(raw_image))
      show_mask(mask, axes[i])
      axes[i].title.set_text(f"Mask {i+1}, Score: {score.item():.3f}")
      axes[i].axis("off")
    plt.show()

# %% ../../nbs/09_HQ_SAM.inference.ipynb 28
CURRETNT_NB='/home/ai_sintercra/homes/hasan/projects/git_data/labeling_test/nbs'
