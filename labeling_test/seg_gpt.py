# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/07_segGpT.ipynb.

# %% auto 0
__all__ = ['get_mask']

# %% ../nbs/07_segGpT.ipynb 5
from PIL import Image
import requests
import torch
import numpy as np
import cv2

# %% ../nbs/07_segGpT.ipynb 6
from cv_tools.core import *

# %% ../nbs/07_segGpT.ipynb 7
from transformers import SegGptImageProcessor, SegGptForImageSegmentation


# %% ../nbs/07_segGpT.ipynb 25
def get_mask(
        image_prompt: Image.Image, 
        mask_prompt: Image.Image, 
        test_img: Image.Image,
        model: SegGptForImageSegmentation,
        model_checkpoint: str = "BAAI/seggpt-vit-large",
        show: bool = False, # whehter to show the image with with annotation or not
        save_ann_path: str = None, # save annotated image
        save_msk_path: str = None, # save mask
        ):
    image_processor = SegGptImageProcessor.from_pretrained(model_checkpoint)

    inputs = image_processor(
        images=test_img,
        prompt_images=image_prompt,
        prompt_masks=mask_prompt,
        return_tensors="pt"
    )
    with torch.no_grad():
        outputs = model(**inputs)
    target_sizes = [test_img.size[::-1]]
    predicted_seg_mask = image_processor.post_process_semantic_segmentation(
        outputs,
        target_sizes=target_sizes,
          )[0]
    np_mask = predicted_seg_mask.numpy().astype(np.uint8)
    if show:
        an_img = overlay_mask_border_on_image_frm_img(
            img=test_img, 
            msk=np_mask,
        )
        show_(an_img)
    if save_msk_path:
        cv2.imwrite(save_msk_path, np_mask)
    
    
    return np_mask
